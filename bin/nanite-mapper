#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/nanite'
require 'optparse'

include Nanite::CommonConfig

options = {}

opts = OptionParser.new do |opts|
  opts.banner = "Usage: nanite-mapper [-flags] [argument]"
  opts.define_head "Nanite Mapper: clustered head unit for self assembling cluster of ruby processes."
  opts.separator '*'*80

  setup_mapper_options(opts, options)
end

opts.parse!

if ARGV[0] == 'stop'
  mapper = Nanite::Mapper.new(options)
  pid_file = Nanite::PidFile.new(mapper.identity, mapper.options)
  unless pid = pid_file.read_pid
    puts "#{pid_file} not found"
    exit
  end
  puts "Stopping nanite mapper #{mapper.identity} (pid #{pid})"
  begin
    Process.kill('TERM', pid)
  rescue Errno::ESRCH
    puts "Process does not exist (pid #{pid})"
    exit
  end
  puts 'Done.'
  exit
end

EM.run do
  Nanite.start_mapper(options)
end
